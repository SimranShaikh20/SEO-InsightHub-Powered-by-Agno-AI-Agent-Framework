# Enhanced PDF generation function with proper error handling and debugging
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from datetime import datetime
import io
import base64
import streamlit as st
import traceback

def create_comprehensive_seo_report(analysis_result, site_data, keyword_data=None, competitor_data=None):
    """Create a comprehensive PDF report from SEO analysis with proper error handling"""
    
    try:
        # Debug: Print what we received
        st.write("DEBUG: Creating PDF with data:")
        st.write(f"- Analysis result type: {type(analysis_result)}")
        st.write(f"- Site data keys: {list(site_data.keys()) if isinstance(site_data, dict) else 'Not a dict'}")
        
        # Create a BytesIO buffer to hold the PDF
        buffer = io.BytesIO()
        
        # Create the PDF document
        doc = SimpleDocTemplate(buffer, pagesize=A4, 
                              rightMargin=72, leftMargin=72, 
                              topMargin=72, bottomMargin=18)
        
        # Container for the 'Flowable' objects
        story = []
        
        # Get styles
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#FF4B4B'),
            alignment=TA_CENTER
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#262730'),
            spaceBefore=20
        )
        
        subheading_style = ParagraphStyle(
            'CustomSubHeading',
            parent=styles['Heading3'],
            fontSize=12,
            spaceAfter=8,
            textColor=colors.HexColor('#555'),
            spaceBefore=12
        )
        
        # Title Page
        story.append(Paragraph("SEO InsightHub Analysis Report", title_style))
        story.append(Spacer(1, 20))
        
        # Report metadata with safe access
        url = site_data.get('url', 'N/A') if isinstance(site_data, dict) else 'N/A'
        overall_score = getattr(analysis_result, 'overall_score', 0) if analysis_result else 0
        
        metadata_data = [
            ['Website URL:', str(url)],
            ['Analysis Date:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            ['Overall SEO Score:', f"{overall_score:.1f}/100"],
            ['Report Generated by:', 'SEO Analysis Tool']
        ]
        
        metadata_table = Table(metadata_data, colWidths=[2*inch, 4*inch])
        metadata_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f8f9fa')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ]))
        
        story.append(metadata_table)
        story.append(Spacer(1, 30))
        
        # Executive Summary with safe access
        story.append(Paragraph("Executive Summary", heading_style))
        
        # Safe access to insights
        site_insights = getattr(analysis_result, 'site_insights', []) if analysis_result else []
        competitive_insights = getattr(analysis_result, 'competitive_insights', []) if analysis_result else []
        keyword_insights = getattr(analysis_result, 'keyword_insights', []) if analysis_result else []
        
        all_insights = site_insights + competitive_insights + keyword_insights
        
        if all_insights:
            high_priority_count = len([i for i in all_insights if getattr(i, 'priority', '') == "High"])
            medium_priority_count = len([i for i in all_insights if getattr(i, 'priority', '') == "Medium"])
            low_priority_count = len([i for i in all_insights if getattr(i, 'priority', '') == "Low"])
            
            confidences = [getattr(i, 'confidence', 0) for i in all_insights if hasattr(i, 'confidence')]
            impacts = [getattr(i, 'impact_score', 0) for i in all_insights if hasattr(i, 'impact_score')]
            
            avg_confidence = sum(confidences) / len(confidences) if confidences else 0
            avg_impact = sum(impacts) / len(impacts) if impacts else 0
        else:
            high_priority_count = medium_priority_count = low_priority_count = 0
            avg_confidence = avg_impact = 0
        
        summary_text = f"""
        This comprehensive SEO analysis has identified <b>{len(all_insights)} total optimization opportunities</b> 
        for your website. The analysis includes <b>{high_priority_count} high-priority issues</b> that require 
        immediate attention, <b>{medium_priority_count} medium-priority improvements</b> for short-term gains, 
        and <b>{low_priority_count} long-term strategic opportunities</b>.
        <br/><br/>
        The analysis has an average confidence level of <b>{avg_confidence*100:.1f}%</b> with an average 
        impact score of <b>{avg_impact:.1f}/10</b>, indicating actionable recommendations.
        """
        
        story.append(Paragraph(summary_text, styles['Normal']))
        story.append(PageBreak())
        
        # Immediate Actions Section with safe access
        story.append(Paragraph("🚨 Immediate Actions (High Priority)", heading_style))
        
        action_plan = getattr(analysis_result, 'action_plan', {}) if analysis_result else {}
        immediate_actions = action_plan.get("immediate_actions", []) if isinstance(action_plan, dict) else []
        
        if immediate_actions:
            for i, insight in enumerate(immediate_actions, 1):
                story.append(Paragraph(f"Action #{i}: {getattr(insight, 'category', 'General')}", subheading_style))
                
                # Action details table with safe access
                action_data = [
                    ['Issue:', str(getattr(insight, 'issue', 'N/A'))],
                    ['Recommendation:', str(getattr(insight, 'recommendation', 'N/A'))],
                    ['Impact Score:', f"{getattr(insight, 'impact_score', 0)}/10"],
                    ['Effort Required:', str(getattr(insight, 'effort_required', 'N/A'))],
                    ['AI Confidence:', f"{getattr(insight, 'confidence', 0)*100:.0f}%"],
                    ['Category:', str(getattr(insight, 'category', 'General'))]
                ]
                
                action_table = Table(action_data, colWidths=[1.5*inch, 4.5*inch])
                action_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#ffebee')),
                    ('BACKGROUND', (1, 0), (1, -1), colors.white),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('GRID', (0, 0), (-1, -1), 1, colors.grey),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ]))
                
                story.append(action_table)
                story.append(Spacer(1, 15))
        else:
            story.append(Paragraph("✅ No immediate high-priority issues identified.", styles['Normal']))
        
        # Technical Data Section
        story.append(PageBreak())
        story.append(Paragraph("🔧 Technical Analysis Data", heading_style))
        
        # Site performance data with safe access
        page_load_time = site_data.get('page_load_time', 0) if isinstance(site_data, dict) else 0
        word_count = site_data.get('word_count', 0) if isinstance(site_data, dict) else 0
        meta_description = site_data.get('meta_description') if isinstance(site_data, dict) else None
        title = site_data.get('title') if isinstance(site_data, dict) else None
        mobile_friendly = site_data.get('mobile_friendly') if isinstance(site_data, dict) else None
        
        technical_data = [
            ['Metric', 'Value', 'Status'],
            ['Page Load Time', f"{page_load_time} seconds", 
             'Good' if page_load_time < 3 else 'Needs Improvement'],
            ['Word Count', str(word_count), 
             'Good' if word_count > 500 else 'Low'],
            ['Has Meta Description', 'Yes' if meta_description else 'No',
             'Good' if meta_description else 'Missing'],
            ['Has Title Tag', 'Yes' if title else 'No',
             'Good' if title else 'Missing'],
            ['Mobile Friendly', 'Yes' if mobile_friendly else 'Unknown',
             'Good' if mobile_friendly else 'Check Required']
        ]
        
        tech_table = Table(technical_data, colWidths=[2*inch, 2*inch, 2*inch])
        tech_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f5f5f5')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ]))
        
        story.append(tech_table)
        story.append(Spacer(1, 20))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = f"""
        <br/><br/>
        <i>This report was generated by SEO Analysis Tool on 
        {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}.</i>
        """
        
        story.append(Paragraph(footer_text, styles['Normal']))
        
        # Build PDF
        st.write("DEBUG: Building PDF...")
        doc.build(story)
        
        # Get the value of the BytesIO buffer and return it
        pdf_data = buffer.getvalue()
        buffer.close()
        
        st.write(f"DEBUG: PDF generated successfully, size: {len(pdf_data)} bytes")
        return pdf_data
        
    except Exception as e:
        st.error(f"Error generating PDF: {str(e)}")
        st.write("Full error traceback:")
        st.code(traceback.format_exc())
        return None

def add_pdf_export_section(analysis_result, site_data, keyword_data=None, competitor_data=None):
    """Add PDF export functionality to the Streamlit app with better error handling"""
    
    st.header("📄 Export Analysis Report")
    
    # Debug information
    with st.expander("🔍 Debug Information", expanded=False):
        st.write("**Data Status:**")
        st.write(f"- Analysis result: {'✅ Available' if analysis_result else '❌ Missing'}")
        st.write(f"- Site data: {'✅ Available' if site_data else '❌ Missing'}")
        st.write(f"- Keyword data: {'✅ Available' if keyword_data else '❌ Not provided'}")
        st.write(f"- Competitor data: {'✅ Available' if competitor_data else '❌ Not provided'}")
        
        if analysis_result:
            st.write(f"- Overall score: {getattr(analysis_result, 'overall_score', 'N/A')}")
            st.write(f"- Site insights: {len(getattr(analysis_result, 'site_insights', []))}")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.info("📊 Generate a comprehensive PDF report containing all analysis results, recommendations, and action plans.")
        
        # Check if we have minimum required data
        if not analysis_result and not site_data:
            st.warning("⚠️ No analysis data available. Please run the SEO analysis first.")
            return
        
        if st.button("🚀 Generate PDF Report", type="primary", use_container_width=True):
            with st.spinner("📄 Generating comprehensive PDF report..."):
                try:
                    st.write("Starting PDF generation...")
                    
                    # Generate the PDF
                    pdf_data = create_comprehensive_seo_report(
                        analysis_result, 
                        site_data, 
                        keyword_data, 
                        competitor_data
                    )
                    
                    if pdf_data:
                        # Create download button
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        filename = f"SEO_Analysis_Report_{timestamp}.pdf"
                        
                        st.success("✅ PDF report generated successfully!")
                        
                        # Download button
                        st.download_button(
                            label="📥 Download PDF Report",
                            data=pdf_data,
                            file_name=filename,
                            mime="application/pdf",
                            use_container_width=True,
                            key="pdf_download"  # Add unique key
                        )
                        
                        # Display report stats
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Report Size", f"{len(pdf_data) / 1024:.1f} KB")
                        with col2:
                            if analysis_result:
                                site_insights = getattr(analysis_result, 'site_insights', [])
                                competitive_insights = getattr(analysis_result, 'competitive_insights', [])
                                keyword_insights = getattr(analysis_result, 'keyword_insights', [])
                                total_insights = len(site_insights + competitive_insights + keyword_insights)
                            else:
                                total_insights = 0
                            st.metric("Total Insights", total_insights)
                        with col3:
                            overall_score = getattr(analysis_result, 'overall_score', 0) if analysis_result else 0
                            st.metric("Analysis Score", f"{overall_score:.1f}/100")
                        
                        st.balloons()
                    else:
                        st.error("❌ Failed to generate PDF report. Check the debug information above.")
                        
                except Exception as e:
                    st.error(f"❌ Failed to generate PDF report: {str(e)}")
                    st.write("Full error details:")
                    st.code(traceback.format_exc())

# Simple fallback PDF generator for testing
def create_simple_test_pdf():
    """Create a simple test PDF to verify PDF generation works"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    
    styles = getSampleStyleSheet()
    story = []
    
    story.append(Paragraph("Test SEO Report", styles['Title']))
    story.append(Spacer(1, 20))
    story.append(Paragraph("This is a test PDF to verify PDF generation is working.", styles['Normal']))
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"Generated on: {datetime.now()}", styles['Normal']))
    
    doc.build(story)
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

def test_pdf_generation():
    """Test function to verify PDF generation works"""
    st.subheader("🧪 Test PDF Generation")
    
    if st.button("Generate Test PDF"):
        try:
            pdf_data = create_simple_test_pdf()
            
            st.success("✅ Test PDF generated successfully!")
            st.download_button(
                label="📥 Download Test PDF",
                data=pdf_data,
                file_name=f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                mime="application/pdf"
            )
        except Exception as e:
            st.error(f"❌ Test PDF generation failed: {str(e)}")
            st.code(traceback.format_exc())